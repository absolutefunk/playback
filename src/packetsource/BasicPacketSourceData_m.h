//
// Generated file, do not edit! Created by nedtool 4.6 from packetsource/BasicPacketSourceData.msg.
//

#ifndef _BASICPACKETSOURCEDATA_M_H_
#define _BASICPACKETSOURCEDATA_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>packetsource/BasicPacketSourceData.msg:22</tt> by nedtool.
 * <pre>
 * // Message definition for the BasicPacketSource. This provides an example of how to efficiently send parameters
 * // to subscribed packet injectors.  Each PacketSource should have a corresponding MSG definition for all the
 * // parameters that the injector(s) need.
 * message BasicPacketSourceData
 * {
 *     short srcPort;
 *     short destPort;
 *     string srcAddress;
 *     string destAddress;
 *     int seqNo;
 *     int windowSize;
 * }
 * </pre>
 */
class BasicPacketSourceData : public ::cMessage
{
  protected:
    short srcPort_var;
    short destPort_var;
    opp_string srcAddress_var;
    opp_string destAddress_var;
    int seqNo_var;
    int windowSize_var;

  private:
    void copy(const BasicPacketSourceData& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BasicPacketSourceData&);

  public:
    BasicPacketSourceData(const char *name=NULL, int kind=0);
    BasicPacketSourceData(const BasicPacketSourceData& other);
    virtual ~BasicPacketSourceData();
    BasicPacketSourceData& operator=(const BasicPacketSourceData& other);
    virtual BasicPacketSourceData *dup() const {return new BasicPacketSourceData(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getSrcPort() const;
    virtual void setSrcPort(short srcPort);
    virtual short getDestPort() const;
    virtual void setDestPort(short destPort);
    virtual const char * getSrcAddress() const;
    virtual void setSrcAddress(const char * srcAddress);
    virtual const char * getDestAddress() const;
    virtual void setDestAddress(const char * destAddress);
    virtual int getSeqNo() const;
    virtual void setSeqNo(int seqNo);
    virtual int getWindowSize() const;
    virtual void setWindowSize(int windowSize);
};

inline void doPacking(cCommBuffer *b, BasicPacketSourceData& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BasicPacketSourceData& obj) {obj.parsimUnpack(b);}


#endif // ifndef _BASICPACKETSOURCEDATA_M_H_

